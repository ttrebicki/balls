{"version":3,"sources":["compo/Shape/Shape.tsx","compo/RenderManyShapes/RenderManyShapes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Shape","position","rotation","initialColor","ref","useRef","x","y","z","useFrame","state","delta","current","activeColor","useState","color","setColor","permanentColor","setPermanentColor","onPointerOver","onPointerOut","onClick","args","Math","random","RenderManyShapes","shapeNum","shapesArray","i","push","map","shape","index","App","ceil","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAGaA,EAAQ,SAAC,GAQf,IAPNC,EAOK,EAPLA,SACAC,EAMK,EANLA,SACAC,EAKK,EALLA,aAMMC,EAAMC,iBAAO,CAAEJ,SAAU,CAAEK,EAAG,EAAGC,EAAG,EAAGC,EAAG,KAChDC,aAAS,SAACC,EAAOC,GAChBP,EAAIQ,QAAQX,SAASK,GAAKJ,EAAS,GAAK,IACxCE,EAAIQ,QAAQX,SAASM,GAAKL,EAAS,GAAK,IACxCE,EAAIQ,QAAQX,SAASO,GAAKN,EAAS,GAAK,OAGzC,IAGMW,EAAc,UAXf,EAYqBC,mBAASX,GAZ9B,mBAYEY,EAZF,KAYSC,EAZT,OAauCF,oBAAS,GAbhD,mBAaEG,EAbF,KAakBC,EAblB,KAeL,OACC,uBACCd,IAAKA,EACLH,SAAUA,EACVkB,cAAe,kBAAMH,EAASH,IAC9BO,aAAc,kBAAMJ,EAASb,IAC7BkB,QAAS,WACRH,GAAkB,IANpB,UASC,mCAAmBH,MAAOE,EAAiBJ,EAAcE,IACzD,sCAAsBO,KAAM,CAACC,KAAKC,SAAW,UCjCnCC,EAAmB,SAAC,GAGhC,IAH4G,IAA1EtB,EAAyE,EAAzEA,aAAcuB,EAA2D,EAA3DA,SAC1CC,EAAc,GAEXC,EAAI,EAAGA,EAAIF,EAAUE,IAC7BD,EAAYE,KAAKD,GAGlB,OACI,mCAEWD,EAAYG,KAAI,SAACC,EAAOC,GAAR,OACZ,cAAC,EAAD,CAEd7B,aAAcA,EACIF,SACI8B,EAAQ,EACF,CAACR,KAAKC,SAAUD,KAAKC,SAAUD,KAAKC,UACpCO,EAAQ,EACR,CAAkB,IAAhBR,KAAKC,SAAgC,IAAhBD,KAAKC,UAAgBD,KAAKC,UACjDO,EAAQ,EACJ,CAAkB,IAAhBR,KAAKC,SAA+B,GAAhBD,KAAKC,SAAeD,KAAKC,UAC/C,CAAiB,GAAhBD,KAAKC,SAAgC,IAAhBD,KAAKC,SAAeD,KAAKC,UAE7DtB,SAAU,CACNqB,KAAKC,SAAWD,KAAKC,SAAW,GAChCD,KAAKC,SAAWD,KAAKC,SAAW,GAChCD,KAAKC,SAAWD,KAAKC,SAAW,KAd/BQ,WCOdC,G,MAfH,WAAO,IAAD,EACenB,mBAASS,KAAKW,KAAqB,IAAhBX,KAAKC,WADvC,mBACVE,EADU,UAEjB,OACC,qBAAKS,UAAU,MAAf,SACC,eAAC,IAAD,WACC,iCACA,4BAAYpB,MAAO,UAAWd,SAAU,CAAC,EAAG,GAAI,KAChD,cAAC,EAAD,CAAkBE,aAAc,UAAWuB,SAAUA,IACrD,cAAC,EAAD,CAAkBvB,aAAc,UAAWuB,SAAUA,WCF1CU,EAZS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHXQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.c184d787.chunk.js","sourcesContent":["import { useFrame, Vector3 } from '@react-three/fiber';\nimport React, { useRef, useState } from 'react';\n\nexport const Shape = ({\n\tposition,\n\trotation,\n\tinitialColor,\n}: {\n\tposition: Vector3;\n\trotation: number[];\n\tinitialColor: string;\n}) => {\n\tconst ref = useRef({ position: { x: 0, y: 0, z: 0 } });\n\tuseFrame((state, delta) => {\n\t\tref.current.position.x -= rotation[0] / 100;\n\t\tref.current.position.y -= rotation[1] / 100;\n\t\tref.current.position.z -= rotation[2] / 100;\n\t});\n\n\tconst colorLottery = () => Math.ceil(Math.random() * 100 % 255);\n\n\t// const initialColor = `rgba(${colorLottery()},${colorLottery()},${colorLottery()},${colorLottery()})`;\n\tconst activeColor = '#aa33ff';\n\tconst [color, setColor] = useState(initialColor);\n\tconst [permanentColor, setPermanentColor] = useState(false);\n\n\treturn (\n\t\t<mesh\n\t\t\tref={ref}\n\t\t\tposition={position}\n\t\t\tonPointerOver={() => setColor(activeColor)}\n\t\t\tonPointerOut={() => setColor(initialColor)}\n\t\t\tonClick={() => {\n\t\t\t\tsetPermanentColor(true);\n\t\t\t}}\n\t\t>\n\t\t\t<meshPhongMaterial color={permanentColor ? activeColor : color} />\n\t\t\t<sphereBufferGeometry args={[Math.random() / 10]} />\n\n\t\t</mesh>\n\t);\n};\n","import React from 'react';\n\nimport { Shape } from '../Shape/Shape';\n\nexport const RenderManyShapes = ({ initialColor, shapeNum }: { initialColor: string, shapeNum: number }) => {\n\tconst shapesArray = [];\n\n\tfor (let i = 0; i < shapeNum; i++) {\n\t\tshapesArray.push(i);\n\t}\n\n\treturn (\n\t    <>\n            {\n                shapesArray.map((shape, index) => (\n                    <Shape\n                        key={index++}\n\t\t\t\t\t\tinitialColor={initialColor}\n                        position={\n                            shape % 4\n                                ? [Math.random(), Math.random(), Math.random()]\n                                : shape % 3\n                                ? [-Math.random() * 10, -Math.random() * 10, -Math.random()]\n                                : shape % 2\n                                    ? [-Math.random() * 10, Math.random() * 10, Math.random()]\n                                    : [Math.random() * 10, -Math.random() * 10, Math.random()]\n                        }\n                        rotation={[\n                            Math.random() / Math.random() / 10,\n                            Math.random() / Math.random() / 10,\n                            Math.random() / Math.random() / 10,\n                        ]}\n                    />\n                ))\n            }\n        </>\n    );\n};\n","import React, {useState} from 'react';\n\nimport { Canvas } from '@react-three/fiber';\n\nimport { RenderManyShapes } from './compo/RenderManyShapes/RenderManyShapes';\n\nimport './App.css';\n\nconst App = () => {\n\tconst [shapeNum, setShapeNum] = useState(Math.ceil(Math.random() * 100));\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Canvas>\n\t\t\t\t<ambientLight />\n\t\t\t\t<pointLight color={'#ffffff'} position={[1, 0, -2]} />\n\t\t\t\t<RenderManyShapes initialColor={'#eff200'} shapeNum={shapeNum} />\n\t\t\t\t<RenderManyShapes initialColor={'#ff2222'} shapeNum={shapeNum} />\n\t\t\t\t{/*<RenderManyShapes initialColor={'#cc22ff'} shapeNum={shapeNum} />*/}\n\t\t\t</Canvas>\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}