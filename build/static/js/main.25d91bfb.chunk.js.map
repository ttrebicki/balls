{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","Shape","position","rotation","ref","useRef","x","y","z","useFrame","state","delta","current","initialColor","activeColor","useState","color","setColor","permanentColor","setPermanentColor","onPointerOver","onPointerOut","onClick","args","className","shapesArray","index","i","push","Math","random","renderShapes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNA+FeA,MAzFf,WACC,IAAMC,EAAQ,SAAC,GAMR,IALNC,EAKK,EALLA,SACAC,EAIK,EAJLA,SAKMC,EAAMC,iBAAO,CAAEH,SAAU,CAAEI,EAAG,EAAGC,EAAG,EAAGC,EAAG,KAChDC,aAAS,SAACC,EAAOC,GAChBP,EAAIQ,QAAQV,SAASI,GAAKH,EAAS,GAAK,IACxCC,EAAIQ,QAAQV,SAASK,GAAKJ,EAAS,GAAK,IACxCC,EAAIQ,QAAQV,SAASM,GAAKL,EAAS,GAAK,OAGzC,IAAMU,EAAe,UACfC,EAAc,UATf,EAUqBC,mBAASF,GAV9B,mBAUEG,EAVF,KAUSC,EAVT,OAWuCF,oBAAS,GAXhD,mBAWEG,EAXF,KAWkBC,EAXlB,KAaL,OACC,uBACCf,IAAKA,EACLF,SAAUA,EACVkB,cAAe,kBAAMH,EAASH,IAC9BO,aAAc,kBAAMJ,EAASJ,IAC7BS,QAAS,WACRH,GAAkB,IANpB,UASC,mCAAmBH,MAAOE,EAAiBJ,EAAcE,IACzD,sCAAsBO,KAAM,CAAC,UA8ChC,OACC,qBAAKC,UAAU,MAAf,SACC,eAAC,IAAD,WACC,iCAEA,4BAAYR,MAAO,UAAWd,SAAU,CAAC,EAAG,EAAG,KA9C7B,WAIpB,IAHA,IAAMuB,EAAc,GAChBC,EAAQ,EAEHC,EAAI,EAAGA,EAAI,IAAKA,IACxBF,EAAYG,KACX,cAAC3B,EAAD,CAECC,SACCyB,EAAI,EACD,CACAE,KAAKC,SACLD,KAAKC,SACLD,KAAKC,UAELH,EAAI,EAAI,EACPE,KAAKC,UACLD,KAAKC,UACLD,KAAKC,UACFH,EAAI,EAAI,EACZE,KAAKC,SACND,KAAKC,SACLD,KAAKC,UACF,CACHD,KAAKC,UACJD,KAAKC,UACLD,KAAKC,UAGT3B,SAAU,CACT0B,KAAKC,SAAWD,KAAKC,SAAW,IAChCD,KAAKC,SAAWD,KAAKC,SAAW,IAChCD,KAAKC,SAAWD,KAAKC,SAAW,MAzB5BJ,MA+BR,OAAOD,EASJM,SC3EUC,EAZS,SAACC,GACpBA,GAAeA,aAAuBC,UACzC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC5DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHXQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAMzBb,M","file":"static/js/main.25d91bfb.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\nimport { Canvas, useFrame, Vector3 } from '@react-three/fiber';\nimport {BufferGeometry} from \"three\";\nimport * as THREE from 'three'\n\nfunction App() {\n\tconst Shape = ({\n\t\tposition,\n\t\trotation,\n\t}: {\n\t\tposition: Vector3;\n\t\trotation: number[];\n\t}) => {\n\t\tconst ref = useRef({ position: { x: 0, y: 0, z: 0 } });\n\t\tuseFrame((state, delta) => {\n\t\t\tref.current.position.x += rotation[0] / 100;\n\t\t\tref.current.position.y += rotation[1] / 100;\n\t\t\tref.current.position.z += rotation[2] / 100;\n\t\t});\n\n\t\tconst initialColor = '#eff200';\n\t\tconst activeColor = '#aa33ff';\n\t\tconst [color, setColor] = useState(initialColor);\n\t\tconst [permanentColor, setPermanentColor] = useState(false);\n\n\t\treturn (\n\t\t\t<mesh\n\t\t\t\tref={ref}\n\t\t\t\tposition={position}\n\t\t\t\tonPointerOver={() => setColor(activeColor)}\n\t\t\t\tonPointerOut={() => setColor(initialColor)}\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetPermanentColor(true);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<meshPhongMaterial color={permanentColor ? activeColor : color} />\n\t\t\t\t<sphereBufferGeometry args={[0.1]} />\n\t\t\t</mesh>\n\t\t);\n\t};\n\n\tconst renderShapes = () => {\n\t\tconst shapesArray = [];\n\t\tlet index = 0;\n\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tshapesArray.push(\n\t\t\t\t<Shape\n\t\t\t\t\tkey={index++}\n\t\t\t\t\tposition={\n\t\t\t\t\t\ti % 2\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\tMath.random(),\n\t\t\t\t\t\t\t\t\tMath.random(),\n\t\t\t\t\t\t\t\t\tMath.random(),\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: i % 3 ? [\n\t\t\t\t\t\t\t\t\t-Math.random(),\n\t\t\t\t\t\t\t\t\t-Math.random(),\n\t\t\t\t\t\t\t\t\t-Math.random(),\n\t\t\t\t\t\t\t  ] : i % 4 ? [\n\t\t\t\t\t\t\t\t-Math.random(),\n\t\t\t\t\t\t\t\tMath.random(),\n\t\t\t\t\t\t\t\tMath.random(),\n\t\t\t\t\t\t\t] : [\n\t\t\t\t\t\t\t\tMath.random(),\n\t\t\t\t\t\t\t\t-Math.random(),\n\t\t\t\t\t\t\t\t+Math.random(),\n\t\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t\trotation={[\n\t\t\t\t\t\tMath.random() / Math.random() / 100,\n\t\t\t\t\t\tMath.random() / Math.random() / 100,\n\t\t\t\t\t\tMath.random() / Math.random() / 100,\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\treturn shapesArray;\n\t};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Canvas>\n\t\t\t\t<ambientLight\n\t\t\t\t/>\n\t\t\t\t<pointLight color={'#ffffff'} position={[0, 0, 0]} />\n\t\t\t\t{renderShapes()}\n\t\t\t</Canvas>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\tgetCLS(onPerfEntry);\n\t\t\tgetFID(onPerfEntry);\n\t\t\tgetFCP(onPerfEntry);\n\t\t\tgetLCP(onPerfEntry);\n\t\t\tgetTTFB(onPerfEntry);\n\t\t});\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}